"use strict";
(self["webpackChunkneo_mjs_realworld_example_app"] = self["webpackChunkneo_mjs_realworld_example_app"] || []).push([["node_modules_neo_mjs_src_remotes_Api_mjs"],{

/***/ "./node_modules/neo.mjs/src/remotes/Api.mjs":
/*!**************************************************!*\
  !*** ./node_modules/neo.mjs/src/remotes/Api.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Base.mjs */ "./node_modules/neo.mjs/src/core/Base.mjs");


/**
 * @class Neo.remotes.Api
 * @extends Neo.core.Base
 * @singleton
 */
class Api extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.remotes.Api'
         * @protected
         */
        className: 'Neo.remotes.Api',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }}

    /**
     * @param {String} service
     * @param {String} method
     * @returns {function(*=, *=): Promise<any>}
     */
    generateRemote(service, method) {
        return function(...args) {
            return Neo.currentWorker.promiseMessage('data', {
                action: 'rpc',
                method,
                params: [...args],
                service
            })
        }
    }

    /**
     *
     */
    load() {
        let config = Neo.config,
            path   = config.remotesApiUrl;

        // relative paths need a special treatment
        if (!path.includes('http')) {
            path = config.appPath.split('/');
            path.pop();
            path = `../../${path.join('/')}/${config.remotesApiUrl}`;
        }

        fetch(path)
            .then(response => response.json())
            .then(data => {
                Neo.currentWorker.sendMessage('data', {action: 'registerApi', data});
                this.register(data)
            })
    }

    /**
     * @param {Object} api
     */
    register(api) {
        let ns;

        Object.entries(api.services).forEach(([service, serviceValue]) => {
            ns = Neo.ns(`${api.namespace}.${service}`, true);

            Object.entries(serviceValue.methods).forEach(([method, methodValue]) => {
                ns[method] = this.generateRemote(service, method);
            })
        })
    }
}

Neo.applyClassConfig(Api);

let instance = Neo.create(Api);

Neo.applyToGlobalNs(instance);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL2FwcC9ub2RlX21vZHVsZXNfbmVvX21qc19zcmNfcmVtb3Rlc19BcGlfbWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQW9DOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNEQUFJO0FBQ3RCLHdCQUF3QjtBQUN4QjtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGVBQWUsR0FBRyxxQkFBcUI7QUFDbkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdURBQXVELDRCQUE0QjtBQUNuRjtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIsY0FBYyxHQUFHLFFBQVE7O0FBRXBEO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsaUVBQWUsUUFBUSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmVvLm1qcy1yZWFsd29ybGQtZXhhbXBsZS1hcHAvLi9ub2RlX21vZHVsZXMvbmVvLm1qcy9zcmMvcmVtb3Rlcy9BcGkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlIGZyb20gJy4uL2NvcmUvQmFzZS5tanMnO1xuXG4vKipcbiAqIEBjbGFzcyBOZW8ucmVtb3Rlcy5BcGlcbiAqIEBleHRlbmRzIE5lby5jb3JlLkJhc2VcbiAqIEBzaW5nbGV0b25cbiAqL1xuY2xhc3MgQXBpIGV4dGVuZHMgQmFzZSB7XG4gICAgc3RhdGljIGdldENvbmZpZygpIHtyZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG1lbWJlciB7U3RyaW5nfSBjbGFzc05hbWU9J05lby5yZW1vdGVzLkFwaSdcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLnJlbW90ZXMuQXBpJyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBtZW1iZXIge0Jvb2xlYW59IHNpbmdsZXRvbj10cnVlXG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIHNpbmdsZXRvbjogdHJ1ZVxuICAgIH19XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2VydmljZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKj0sICo9KTogUHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGdlbmVyYXRlUmVtb3RlKHNlcnZpY2UsIG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIE5lby5jdXJyZW50V29ya2VyLnByb21pc2VNZXNzYWdlKCdkYXRhJywge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3JwYycsXG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtczogWy4uLmFyZ3NdLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGxvYWQoKSB7XG4gICAgICAgIGxldCBjb25maWcgPSBOZW8uY29uZmlnLFxuICAgICAgICAgICAgcGF0aCAgID0gY29uZmlnLnJlbW90ZXNBcGlVcmw7XG5cbiAgICAgICAgLy8gcmVsYXRpdmUgcGF0aHMgbmVlZCBhIHNwZWNpYWwgdHJlYXRtZW50XG4gICAgICAgIGlmICghcGF0aC5pbmNsdWRlcygnaHR0cCcpKSB7XG4gICAgICAgICAgICBwYXRoID0gY29uZmlnLmFwcFBhdGguc3BsaXQoJy8nKTtcbiAgICAgICAgICAgIHBhdGgucG9wKCk7XG4gICAgICAgICAgICBwYXRoID0gYC4uLy4uLyR7cGF0aC5qb2luKCcvJyl9LyR7Y29uZmlnLnJlbW90ZXNBcGlVcmx9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZldGNoKHBhdGgpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBOZW8uY3VycmVudFdvcmtlci5zZW5kTWVzc2FnZSgnZGF0YScsIHthY3Rpb246ICdyZWdpc3RlckFwaScsIGRhdGF9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKGRhdGEpXG4gICAgICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhcGlcbiAgICAgKi9cbiAgICByZWdpc3RlcihhcGkpIHtcbiAgICAgICAgbGV0IG5zO1xuXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGFwaS5zZXJ2aWNlcykuZm9yRWFjaCgoW3NlcnZpY2UsIHNlcnZpY2VWYWx1ZV0pID0+IHtcbiAgICAgICAgICAgIG5zID0gTmVvLm5zKGAke2FwaS5uYW1lc3BhY2V9LiR7c2VydmljZX1gLCB0cnVlKTtcblxuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc2VydmljZVZhbHVlLm1ldGhvZHMpLmZvckVhY2goKFttZXRob2QsIG1ldGhvZFZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgIG5zW21ldGhvZF0gPSB0aGlzLmdlbmVyYXRlUmVtb3RlKHNlcnZpY2UsIG1ldGhvZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuTmVvLmFwcGx5Q2xhc3NDb25maWcoQXBpKTtcblxubGV0IGluc3RhbmNlID0gTmVvLmNyZWF0ZShBcGkpO1xuXG5OZW8uYXBwbHlUb0dsb2JhbE5zKGluc3RhbmNlKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5zdGFuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=