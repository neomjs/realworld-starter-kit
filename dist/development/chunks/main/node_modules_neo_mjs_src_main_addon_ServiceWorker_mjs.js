"use strict";
(self["webpackChunkneo_mjs_realworld_example_app"] = self["webpackChunkneo_mjs_realworld_example_app"] || []).push([["node_modules_neo_mjs_src_main_addon_ServiceWorker_mjs"],{

/***/ "./node_modules/neo.mjs/src/main/addon/ServiceWorker.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/ServiceWorker.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./node_modules/neo.mjs/src/core/Base.mjs");
/* harmony import */ var _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../worker/Manager.mjs */ "./node_modules/neo.mjs/src/worker/Manager.mjs");



/**
 * Creates a ServiceWorker instance, in case Neo.config.useServiceWorker is set to true
 * @class Neo.main.addon.ServiceWorker
 * @extends Neo.core.Base
 * @singleton
 */
class ServiceWorker extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static config = {
        /**
         * @member {String} className='Neo.main.addon.ServiceWorker'
         * @protected
         */
        className: 'Neo.main.addon.ServiceWorker',
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }

    /**
     * @param {Object} config
     */
    construct(config) {
        if ('serviceWorker' in navigator) {
            let me            = this,
                config        = Neo.config,
                devMode       = config.environment === 'development',
                fileName      = devMode ? 'ServiceWorker.mjs' : 'serviceworker.js',
                folder        = window.location.pathname.includes('/examples/') ? 'examples/' : 'apps/',
                opts          = devMode ? {type: 'module'} : {},
                path          = (devMode ? config.basePath : config.workerBasePath) + (devMode ? folder : '') + fileName,
                serviceWorker = navigator.serviceWorker;

            window.addEventListener('beforeunload', me.onBeforeUnload.bind(me));

            serviceWorker.register(path, opts)
                .then(registration => {
                    serviceWorker.ready.then(() => {
                        serviceWorker.onmessage = _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].onWorkerMessage.bind(_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"]);

                        if (!_worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].getWorker('service')) {
                            /*
                             * navigator.serviceWorker.controller can be null in case we load a page for the first time
                             * or in case of a force refresh.
                             * See: https://www.w3.org/TR/service-workers/#navigator-service-worker-controller
                             */
                            _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].serviceWorker = registration.active;
                        }

                        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
                            action: 'registerNeoConfig',
                            data  : config
                        })
                    });
                })
        }
    }

    /**
     *
     */
    onBeforeUnload() {
        _worker_Manager_mjs__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage('service', {
            action: 'unregisterPort'
        });
    }
}

let instance = Neo.applyClassConfig(ServiceWorker);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vbm9kZV9tb2R1bGVzX25lb19tanNfc3JjX21haW5fYWRkb25fU2VydmljZVdvcmtlcl9tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ0s7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzREFBSTtBQUNoQztBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGdCQUFnQixJQUFJO0FBQy9EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdGQUFrQyxDQUFDLDJEQUFhOztBQUVsRyw2QkFBNkIscUVBQXVCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseUVBQTJCO0FBQ3ZEOztBQUVBLHdCQUF3Qix1RUFBeUI7QUFDakQ7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVFQUF5QjtBQUNqQztBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBLGlFQUFlLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25lby5tanMtcmVhbHdvcmxkLWV4YW1wbGUtYXBwLy4vbm9kZV9tb2R1bGVzL25lby5tanMvc3JjL21haW4vYWRkb24vU2VydmljZVdvcmtlci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgICAgICAgICAgZnJvbSAnLi4vLi4vY29yZS9CYXNlLm1qcyc7XG5pbXBvcnQgV29ya2VyTWFuYWdlciBmcm9tICcuLi8uLi93b3JrZXIvTWFuYWdlci5tanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBTZXJ2aWNlV29ya2VyIGluc3RhbmNlLCBpbiBjYXNlIE5lby5jb25maWcudXNlU2VydmljZVdvcmtlciBpcyBzZXQgdG8gdHJ1ZVxuICogQGNsYXNzIE5lby5tYWluLmFkZG9uLlNlcnZpY2VXb3JrZXJcbiAqIEBleHRlbmRzIE5lby5jb3JlLkJhc2VcbiAqIEBzaW5nbGV0b25cbiAqL1xuY2xhc3MgU2VydmljZVdvcmtlciBleHRlbmRzIEJhc2Uge1xuICAgIHN0YXRpYyBjb25maWcgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlcidcbiAgICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAgKi9cbiAgICAgICAgY2xhc3NOYW1lOiAnTmVvLm1haW4uYWRkb24uU2VydmljZVdvcmtlcicsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaW5nbGV0b249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzaW5nbGV0b246IHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gICAgICovXG4gICAgY29uc3RydWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgICAgICAgICAgbGV0IG1lICAgICAgICAgICAgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGNvbmZpZyAgICAgICAgPSBOZW8uY29uZmlnLFxuICAgICAgICAgICAgICAgIGRldk1vZGUgICAgICAgPSBjb25maWcuZW52aXJvbm1lbnQgPT09ICdkZXZlbG9wbWVudCcsXG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgICAgICA9IGRldk1vZGUgPyAnU2VydmljZVdvcmtlci5tanMnIDogJ3NlcnZpY2V3b3JrZXIuanMnLFxuICAgICAgICAgICAgICAgIGZvbGRlciAgICAgICAgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoJy9leGFtcGxlcy8nKSA/ICdleGFtcGxlcy8nIDogJ2FwcHMvJyxcbiAgICAgICAgICAgICAgICBvcHRzICAgICAgICAgID0gZGV2TW9kZSA/IHt0eXBlOiAnbW9kdWxlJ30gOiB7fSxcbiAgICAgICAgICAgICAgICBwYXRoICAgICAgICAgID0gKGRldk1vZGUgPyBjb25maWcuYmFzZVBhdGggOiBjb25maWcud29ya2VyQmFzZVBhdGgpICsgKGRldk1vZGUgPyBmb2xkZXIgOiAnJykgKyBmaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBzZXJ2aWNlV29ya2VyID0gbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXI7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBtZS5vbkJlZm9yZVVubG9hZC5iaW5kKG1lKSk7XG5cbiAgICAgICAgICAgIHNlcnZpY2VXb3JrZXIucmVnaXN0ZXIocGF0aCwgb3B0cylcbiAgICAgICAgICAgICAgICAudGhlbihyZWdpc3RyYXRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZVdvcmtlci5vbm1lc3NhZ2UgPSBXb3JrZXJNYW5hZ2VyLm9uV29ya2VyTWVzc2FnZS5iaW5kKFdvcmtlck1hbmFnZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIVdvcmtlck1hbmFnZXIuZ2V0V29ya2VyKCdzZXJ2aWNlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIgY2FuIGJlIG51bGwgaW4gY2FzZSB3ZSBsb2FkIGEgcGFnZSBmb3IgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBvciBpbiBjYXNlIG9mIGEgZm9yY2UgcmVmcmVzaC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWU6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZXJ2aWNlLXdvcmtlcnMvI25hdmlnYXRvci1zZXJ2aWNlLXdvcmtlci1jb250cm9sbGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgV29ya2VyTWFuYWdlci5zZXJ2aWNlV29ya2VyID0gcmVnaXN0cmF0aW9uLmFjdGl2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgV29ya2VyTWFuYWdlci5zZW5kTWVzc2FnZSgnc2VydmljZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdyZWdpc3Rlck5lb0NvbmZpZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSAgOiBjb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG9uQmVmb3JlVW5sb2FkKCkge1xuICAgICAgICBXb3JrZXJNYW5hZ2VyLnNlbmRNZXNzYWdlKCdzZXJ2aWNlJywge1xuICAgICAgICAgICAgYWN0aW9uOiAndW5yZWdpc3RlclBvcnQnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxubGV0IGluc3RhbmNlID0gTmVvLmFwcGx5Q2xhc3NDb25maWcoU2VydmljZVdvcmtlcik7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9