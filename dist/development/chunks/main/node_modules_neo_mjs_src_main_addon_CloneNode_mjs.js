"use strict";
(self["webpackChunkneo_mjs_realworld_example_app"] = self["webpackChunkneo_mjs_realworld_example_app"] || []).push([["node_modules_neo_mjs_src_main_addon_CloneNode_mjs"],{

/***/ "./node_modules/neo.mjs/src/main/addon/CloneNode.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/neo.mjs/src/main/addon/CloneNode.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Base.mjs */ "./node_modules/neo.mjs/src/core/Base.mjs");


/**
 * Basic helper class to create template DOM nodes and apply them to a target node via cloning.
 * See: https://github.com/neomjs/neo/blob/dev/apps/krausest/view/TableComponent.mjs
 * @class Neo.main.addon.CloneNode
 * @extends Neo.core.Base
 * @singleton
 */
class CloneNode extends _core_Base_mjs__WEBPACK_IMPORTED_MODULE_0__["default"] {
    static getConfig() {return {
        /**
         * @member {String} className='Neo.main.addon.CloneNode'
         * @protected
         */
        className: 'Neo.main.addon.CloneNode',
        /**
         * Internal map to store DOM nodes which will get used for cloning
         * @member {Object} map={}
         * @protected
         */
        map: {},
        /**
         * Remote method access for other workers
         * @member {Object} remote={app: [//...]}
         * @protected
         */
        remote: {
            app: [
                'applyClones',
                'createNode'
            ]
        },
        /**
         * @member {Boolean} singleton=true
         * @protected
         */
        singleton: true
    }}

    /**
     *
     * @param {Object} data
     * @param {Array} data.data
     * @param {String} data.id The reference id, not DOM id
     * @param {String} data.parentId
     */
    applyClones(data) {
        let i      = 0,
            node   = this.map[data.id],
            len    = data.data.length,
            parent = document.getElementById(data.parentId),
            clone, itemData, j, path, pathLen, targetNode;

        requestAnimationFrame(() => {
            let start = performance.now();

            for (; i < len; i++) {
                clone    = node.template.cloneNode(true);
                itemData = data.data[i];

                Object.entries(itemData).forEach(([key, value]) => {
                    path = node.paths[key];

                    if (path) {
                        path       = path.split('/').map(e => Number(e));
                        j          = 0;
                        pathLen    = path.length;
                        targetNode = clone;

                        for (; j < pathLen; j++) {
                            targetNode = targetNode.childNodes[path[j]];
                        }

                        targetNode.textContent = value;
                    }
                });

                parent.append(clone);
            }

            let end = performance.now();

            console.log('time', end - start);
        });
    }

    /**
     *
     * @param {Object} data
     * @param {String} data.html
     * @param {String} data.id The reference id, not DOM id
     * @param {Object} data.paths
     * @param {String} data.tag
     */
    createNode(data) {
        let template = document.createElement(data.tag);
        template.innerHTML = data.html;

        this.map[data.id] = {
            paths   : data.paths,
            template: template
        };
    }
}

Neo.applyClassConfig(CloneNode);

let instance = Neo.create(CloneNode);

Neo.applyToGlobalNs(instance);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL21haW4vbm9kZV9tb2R1bGVzX25lb19tanNfc3JjX21haW5fYWRkb25fQ2xvbmVOb2RlX21qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0RBQUk7QUFDNUIsd0JBQXdCO0FBQ3hCO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLG9CQUFvQixRQUFRLFFBQVE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsT0FBTztBQUN0QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxpRUFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZW8ubWpzLXJlYWx3b3JsZC1leGFtcGxlLWFwcC8uL25vZGVfbW9kdWxlcy9uZW8ubWpzL3NyYy9tYWluL2FkZG9uL0Nsb25lTm9kZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgZnJvbSAnLi4vLi4vY29yZS9CYXNlLm1qcyc7XG5cbi8qKlxuICogQmFzaWMgaGVscGVyIGNsYXNzIHRvIGNyZWF0ZSB0ZW1wbGF0ZSBET00gbm9kZXMgYW5kIGFwcGx5IHRoZW0gdG8gYSB0YXJnZXQgbm9kZSB2aWEgY2xvbmluZy5cbiAqIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL25lb21qcy9uZW8vYmxvYi9kZXYvYXBwcy9rcmF1c2VzdC92aWV3L1RhYmxlQ29tcG9uZW50Lm1qc1xuICogQGNsYXNzIE5lby5tYWluLmFkZG9uLkNsb25lTm9kZVxuICogQGV4dGVuZHMgTmVvLmNvcmUuQmFzZVxuICogQHNpbmdsZXRvblxuICovXG5jbGFzcyBDbG9uZU5vZGUgZXh0ZW5kcyBCYXNlIHtcbiAgICBzdGF0aWMgZ2V0Q29uZmlnKCkge3JldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtTdHJpbmd9IGNsYXNzTmFtZT0nTmVvLm1haW4uYWRkb24uQ2xvbmVOb2RlJ1xuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBjbGFzc05hbWU6ICdOZW8ubWFpbi5hZGRvbi5DbG9uZU5vZGUnLFxuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWwgbWFwIHRvIHN0b3JlIERPTSBub2RlcyB3aGljaCB3aWxsIGdldCB1c2VkIGZvciBjbG9uaW5nXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdH0gbWFwPXt9XG4gICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgICovXG4gICAgICAgIG1hcDoge30sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdGUgbWV0aG9kIGFjY2VzcyBmb3Igb3RoZXIgd29ya2Vyc1xuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3R9IHJlbW90ZT17YXBwOiBbLy8uLi5dfVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdGU6IHtcbiAgICAgICAgICAgIGFwcDogW1xuICAgICAgICAgICAgICAgICdhcHBseUNsb25lcycsXG4gICAgICAgICAgICAgICAgJ2NyZWF0ZU5vZGUnXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbWVtYmVyIHtCb29sZWFufSBzaW5nbGV0b249dHJ1ZVxuICAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICAqL1xuICAgICAgICBzaW5nbGV0b246IHRydWVcbiAgICB9fVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEuZGF0YVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmlkIFRoZSByZWZlcmVuY2UgaWQsIG5vdCBET00gaWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YS5wYXJlbnRJZFxuICAgICAqL1xuICAgIGFwcGx5Q2xvbmVzKGRhdGEpIHtcbiAgICAgICAgbGV0IGkgICAgICA9IDAsXG4gICAgICAgICAgICBub2RlICAgPSB0aGlzLm1hcFtkYXRhLmlkXSxcbiAgICAgICAgICAgIGxlbiAgICA9IGRhdGEuZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkYXRhLnBhcmVudElkKSxcbiAgICAgICAgICAgIGNsb25lLCBpdGVtRGF0YSwgaiwgcGF0aCwgcGF0aExlbiwgdGFyZ2V0Tm9kZTtcblxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjbG9uZSAgICA9IG5vZGUudGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgICAgICAgIGl0ZW1EYXRhID0gZGF0YS5kYXRhW2ldO1xuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoaXRlbURhdGEpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwYXRoID0gbm9kZS5wYXRoc1trZXldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoICAgICAgID0gcGF0aC5zcGxpdCgnLycpLm1hcChlID0+IE51bWJlcihlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBqICAgICAgICAgID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhMZW4gICAgPSBwYXRoLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5vZGUgPSBjbG9uZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGogPCBwYXRoTGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROb2RlID0gdGFyZ2V0Tm9kZS5jaGlsZE5vZGVzW3BhdGhbal1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROb2RlLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBhcmVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZW5kID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aW1lJywgZW5kIC0gc3RhcnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuaHRtbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLmlkIFRoZSByZWZlcmVuY2UgaWQsIG5vdCBET00gaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YS5wYXRoc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLnRhZ1xuICAgICAqL1xuICAgIGNyZWF0ZU5vZGUoZGF0YSkge1xuICAgICAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGRhdGEudGFnKTtcbiAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gZGF0YS5odG1sO1xuXG4gICAgICAgIHRoaXMubWFwW2RhdGEuaWRdID0ge1xuICAgICAgICAgICAgcGF0aHMgICA6IGRhdGEucGF0aHMsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGVtcGxhdGVcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbk5lby5hcHBseUNsYXNzQ29uZmlnKENsb25lTm9kZSk7XG5cbmxldCBpbnN0YW5jZSA9IE5lby5jcmVhdGUoQ2xvbmVOb2RlKTtcblxuTmVvLmFwcGx5VG9HbG9iYWxOcyhpbnN0YW5jZSk7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9