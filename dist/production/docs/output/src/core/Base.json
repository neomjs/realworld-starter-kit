{"classData":[{"comment":"/**\n * The base class for (almost) all classes inside the Neo namespace\n * Exceptions are e.g. core.IdGenerator, vdom.VNode\n * @class Neo.core.Base\n */","meta":{"filename":"Base.mjs","lineno":7,"columnno":0,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"The base class for (almost) all classes inside the Neo namespace<br />Exceptions are e.g. core.IdGenerator, vdom.VNode","kind":"class","name":"Base","memberof":"Neo.core","longname":"Neo.core.Base","scope":"static","$longname":"Neo.core.Base","$kind":"class","id":1416,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Regex to grab the MethodName from an error\n     * which is a second generation function\n     * @type {*}\n     */","meta":{"range":[504,559],"filename":"Base.mjs","lineno":23,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100045779","name":"methodNameRegex","type":"ClassProperty"}},"description":"Regex to grab the MethodName from an error<br />which is a second generation function","type":{"names":["*"]},"name":"methodNameRegex","longname":"Base#methodNameRegex","kind":"member","memberof":"Base","scope":"instance","$longname":"Base#methodNameRegex","$kind":"property","id":1417,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * True automatically applies the core.Observable mixin\n     * @member {Boolean} observable=false\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":24,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"True automatically applies the core.Observable mixin","kind":"member","name":"observable","type":{"names":["Boolean"]},"defaultvalue":false,"scope":"static","longname":"observable","$longname":"observable","$kind":"property","id":1418,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Keep the overwritten methods\n     * @type {Object}\n     */","meta":{"range":[801,831],"filename":"Base.mjs","lineno":33,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100045783","name":"overwrittenMethods","type":"ClassProperty"}},"description":"Keep the overwritten methods","type":{"names":["Object"]},"name":"overwrittenMethods","longname":"Base#overwrittenMethods","kind":"member","memberof":"Base","scope":"instance","$longname":"Base#overwrittenMethods","$kind":"property","id":1419,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Set this one to false in case you don't want to stick\n     * to the \"anti-pattern\" to apply classes to the global Neo or App namespace\n     * @member {Boolean} registerToGlobalNs=true\n     * @protected\n     * @static\n     */","meta":{"filename":"Base.mjs","lineno":38,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"Set this one to false in case you don't want to stick<br />to the \"anti-pattern\" to apply classes to the global Neo or App namespace","kind":"member","name":"registerToGlobalNs","type":{"names":["Boolean"]},"defaultvalue":true,"access":"protected","scope":"static","longname":"registerToGlobalNs","$longname":"registerToGlobalNs","$kind":"property","id":1420,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Configs will get merged throughout the class hierarchy\n     * @returns {Object} config\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[1257,2439],"filename":"Base.mjs","lineno":50,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100045787","name":"config","type":"ClassProperty"}},"description":"Configs will get merged throughout the class hierarchy","returns":[{"type":{"names":["Object"]},"description":"config"}],"tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"config","longname":"Base#config","kind":"member","memberof":"Base","scope":"instance","$longname":"Base#config","$kind":"property","id":1421,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The class name which will get mapped into the Neo or app namespace\n         * @member {String} className='Neo.core.Base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":51,"columnno":8,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"The class name which will get mapped into the Neo or app namespace","kind":"member","name":"className","type":{"names":["String"]},"defaultvalue":"'Neo.core.Base'","access":"protected","longname":"className","scope":"global","$longname":"className","$kind":"property","id":1422,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The class shortcut-name to use for e.g. creating child components inside a JSON-format\n         * @member {String} ntype='base'\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":57,"columnno":8,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"The class shortcut-name to use for e.g. creating child components inside a JSON-format","kind":"member","name":"ntype","type":{"names":["String"]},"defaultvalue":"'base'","access":"protected","longname":"ntype","scope":"global","$longname":"ntype","$kind":"property","id":1423,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * The unique component id\n         * @member {String|null} id_=null\n         */","meta":{"filename":"Base.mjs","lineno":62,"columnno":8,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"The unique component id","kind":"member","name":"id_","type":{"names":["String","null"]},"defaultvalue":null,"longname":"id_","scope":"global","$longname":"id_","$kind":"property","id":1424,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * Neo.create() will change this flag to true after the onConstructed() chain is done.\n         * @member {Boolean} isConstructed=false\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":68,"columnno":8,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"Neo.create() will change this flag to true after the onConstructed() chain is done.","kind":"member","name":"isConstructed","type":{"names":["Boolean"]},"defaultvalue":false,"access":"protected","longname":"isConstructed","scope":"global","$longname":"isConstructed","$kind":"property","id":1425,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * Add mixins as an array of classNames, imported modules or a mixed version\n         * @member {String[]|Neo.core.Base[]|null} mixins=null\n         */","meta":{"filename":"Base.mjs","lineno":73,"columnno":8,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"Add mixins as an array of classNames, imported modules or a mixed version","kind":"member","name":"mixins","type":{"names":["Array.<String>","Array.<Neo.core.Base>","null"]},"defaultvalue":null,"longname":"mixins","scope":"global","$longname":"mixins","$kind":"property","id":1426,"neoClassName":"Neo.core.Base"},{"comment":"/**\n         * You can create a new instance by passing an imported class (JS module default export)\n         * @member {Class} module=null\n         * @protected\n         */","meta":{"filename":"Base.mjs","lineno":79,"columnno":8,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{}},"description":"You can create a new instance by passing an imported class (JS module default export)","kind":"member","name":"module","type":{"names":["Class"]},"defaultvalue":null,"access":"protected","longname":"module","scope":"global","$longname":"module","$kind":"property","id":1427,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applies the observable mixin if needed, grants remote access if needed.\n     * @param {Object} config={}\n     */","meta":{"range":[2573,3519],"filename":"Base.mjs","lineno":86,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100045801","name":"Base#construct","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"Applies the observable mixin if needed, grants remote access if needed.","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"config"}],"name":"construct","longname":"Base#construct","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#construct","$kind":"method","id":1428,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Triggered after the id config got changed.\n     * You can dynamically change instance ids if needed. They need to stay unique at any given point.\n     * Use case: e.g. component based lists, where you want to re-use item instances.\n     * @param {String|null} value\n     * @param {String|null} oldValue\n     * @protected\n     */","meta":{"range":[3869,4380],"filename":"Base.mjs","lineno":132,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100045921","name":"Base#afterSetId","type":"MethodDefinition","paramnames":["value","oldValue"]},"vars":{"":null}},"description":"Triggered after the id config got changed.<br />You can dynamically change instance ids if needed. They need to stay unique at any given point.<br />Use case: e.g. component based lists, where you want to re-use item instances.","params":[{"type":{"names":["String","null"]},"name":"value"},{"type":{"names":["String","null"]},"name":"oldValue"}],"access":"protected","name":"afterSetId","longname":"Base#afterSetId","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#afterSetId","$kind":"method","id":1429,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applying overwrites and adding overwrittenMethods to the class constructors\n     * @param {Object} cfg\n     * @protected\n     */","meta":{"range":[4530,5234],"filename":"Base.mjs","lineno":157,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100045996","name":"Base.applyOverwrites","type":"MethodDefinition","paramnames":["cfg"]},"vars":{"":null}},"description":"Applying overwrites and adding overwrittenMethods to the class constructors","params":[{"type":{"names":["Object"]},"name":"cfg"}],"access":"protected","name":"applyOverwrites","longname":"Base.applyOverwrites","kind":"function","memberof":"Base","scope":"static","$longname":"Base.applyOverwrites","$kind":"method","id":1430,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Convenience method for beforeSet functions which test if a given value is inside a static array\n     * @param {String|Number} value\n     * @param {String|Number} oldValue\n     * @param {String} name config name\n     * @param {Array|String} [staticName=name + 's'] name of the static config array\n     * @returns {String|Number} value or oldValue\n     */","meta":{"range":[5609,5972],"filename":"Base.mjs","lineno":187,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046067","name":"Base#beforeSetEnumValue","type":"MethodDefinition","paramnames":["value","oldValue","name","staticName"]},"vars":{"":null}},"description":"Convenience method for beforeSet functions which test if a given value is inside a static array","params":[{"type":{"names":["String","Number"]},"name":"value"},{"type":{"names":["String","Number"]},"name":"oldValue"},{"type":{"names":["String"]},"description":"config name","name":"name"},{"type":{"names":["Array","String"]},"optional":true,"defaultvalue":"name + 's'","description":"name of the static config array","name":"staticName"}],"returns":[{"type":{"names":["String","Number"]},"description":"value or oldValue"}],"name":"beforeSetEnumValue","longname":"Base#beforeSetEnumValue","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#beforeSetEnumValue","$kind":"method","id":1431,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * From within an overwrite, a method can call a parent method, by using callOverwritten.\n     *\n     * @example\n     *    afterSetHeight(value, oldValue) {\n     *        // do the standard\n     *        this.callOverwritten(...arguments);\n     *        // do you own stuff\n     *    }\n     *\n     * We create an error to get the caller.name and then run that method on the constructor.\n     * This is based on the following error structure, e.g. afterSetHeight.\n     *\n     *     Error\n     *         at Base.callOverwritten (Base.mjs:176:21)\n     *         at Base.afterSetHeight (Overrides.mjs:19:26)\n     *\n     * @param args\n     */","meta":{"range":[6628,6887],"filename":"Base.mjs","lineno":217,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046122","name":"Base#callOverwritten","type":"MethodDefinition","paramnames":["args"]},"vars":{"":null}},"description":"From within an overwrite, a method can call a parent method, by using callOverwritten.","examples":["afterSetHeight(value, oldValue) {\n       // do the standard\n       this.callOverwritten(...arguments);\n       // do you own stuff\n   }\n\nWe create an error to get the caller.name and then run that method on the constructor.\nThis is based on the following error structure, e.g. afterSetHeight.\n\n    Error\n        at Base.callOverwritten (Base.mjs:176:21)\n        at Base.afterSetHeight (Overrides.mjs:19:26)"],"params":[{"name":"args","variable":true}],"name":"callOverwritten","longname":"Base#callOverwritten","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#callOverwritten","$kind":"method","id":1432,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Uses the IdGenerator to create an id if a static one is not explicitly set.\n     * Registers the instance to manager.Instance if this one is already created,\n     * otherwise stores it inside a tmp map.\n     * @param {String} id\n     */","meta":{"range":[7145,7225],"filename":"Base.mjs","lineno":231,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046165","name":"Base#createId","type":"MethodDefinition","paramnames":["id"]},"vars":{"":null}},"description":"Uses the IdGenerator to create an id if a static one is not explicitly set.<br />Registers the instance to manager.Instance if this one is already created,<br />otherwise stores it inside a tmp map.","params":[{"type":{"names":["String"]},"name":"id"}],"name":"createId","longname":"Base#createId","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#createId","$kind":"method","id":1433,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Unregisters this instance from Neo.manager.Instance\n     * and removes all object entries from this instance\n     */","meta":{"range":[7363,7755],"filename":"Base.mjs","lineno":239,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046185","name":"Base#destroy","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Unregisters this instance from Neo.manager.Instance<br />and removes all object entries from this instance","name":"destroy","longname":"Base#destroy","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#destroy","$kind":"method","id":1434,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Used inside createId() as the default value passed to the IdGenerator.\n     * Override this method as needed.\n     * @returns {String}\n     */","meta":{"range":[7919,7964],"filename":"Base.mjs","lineno":260,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046251","name":"Base#getIdKey","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Used inside createId() as the default value passed to the IdGenerator.<br />Override this method as needed.","returns":[{"type":{"names":["String"]}}],"name":"getIdKey","longname":"Base#getIdKey","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#getIdKey","$kind":"method","id":1435,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Returns the value of a static config key or the staticConfig object itself in case no value is set\n     * @param {String} key The key of a staticConfig defined inside static getStaticConfig\n     * @returns {*}\n     */","meta":{"range":[8203,8269],"filename":"Base.mjs","lineno":269,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046259","name":"Base#getStaticConfig","type":"MethodDefinition","paramnames":["key"]},"vars":{"":null}},"description":"Returns the value of a static config key or the staticConfig object itself in case no value is set","params":[{"type":{"names":["String"]},"description":"The key of a staticConfig defined inside static getStaticConfig","name":"key"}],"returns":[{"type":{"names":["*"]}}],"name":"getStaticConfig","longname":"Base#getStaticConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#getStaticConfig","$kind":"method","id":1436,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Gets triggered after onConstructed() is done\n     * @see {@link Neo.core.Base#onConstructed onConstructed}\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[8437,8446],"filename":"Base.mjs","lineno":278,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046270","name":"Base#init","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets triggered after onConstructed() is done","see":["{@link Neo.core.Base#onConstructed onConstructed}"],"tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"init","longname":"Base#init","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#init","$kind":"method","id":1437,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Applies all class configs to this instance\n     * @param {Object} config\n     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property\n     */","meta":{"range":[8663,8853],"filename":"Base.mjs","lineno":285,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046274","name":"Base#initConfig","type":"MethodDefinition","paramnames":["config","preventOriginalConfig"]},"vars":{"":null}},"description":"Applies all class configs to this instance","params":[{"type":{"names":["Object"]},"name":"config"},{"type":{"names":["Boolean"]},"optional":true,"description":"True prevents the instance from getting an originalConfig property","name":"preventOriginalConfig"}],"name":"initConfig","longname":"Base#initConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#initConfig","$kind":"method","id":1438,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Does get triggered with a delay to ensure that Neo.workerId & Neo.worker.Manager are defined\n     * Remote method access via promises\n     */","meta":{"range":[9016,9844],"filename":"Base.mjs","lineno":296,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046303","name":"Base#initRemote","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Does get triggered with a delay to ensure that Neo.workerId & Neo.worker.Manager are defined<br />Remote method access via promises","name":"initRemote","longname":"Base#initRemote","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#initRemote","$kind":"method","id":1439,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Override this method to change the order configs are applied to this instance.\n     * @param {Object} config\n     * @param {Boolean} [preventOriginalConfig] True prevents the instance from getting an originalConfig property\n     * @returns {Object} config\n     */","meta":{"range":[10129,10524],"filename":"Base.mjs","lineno":325,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046402","name":"Base#mergeConfig","type":"MethodDefinition","paramnames":["config","preventOriginalConfig"]},"vars":{"":null}},"description":"Override this method to change the order configs are applied to this instance.","params":[{"type":{"names":["Object"]},"name":"config"},{"type":{"names":["Boolean"]},"optional":true,"description":"True prevents the instance from getting an originalConfig property","name":"preventOriginalConfig"}],"returns":[{"type":{"names":["Object"]},"description":"config"}],"name":"mergeConfig","longname":"Base#mergeConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#mergeConfig","$kind":"method","id":1440,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     *\n     */","meta":{"range":[10553,10791],"filename":"Base.mjs","lineno":343,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046455","name":"Base#onAfterConstructed","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"name":"onAfterConstructed","longname":"Base#onAfterConstructed","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#onAfterConstructed","$kind":"method","id":1441,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Gets triggered after all constructors are done\n     * @tutorial 02_ClassSystem\n     */","meta":{"range":[10899,10917],"filename":"Base.mjs","lineno":356,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046482","name":"Base#onConstructed","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Gets triggered after all constructors are done","tags":[{"originalTitle":"tutorial","title":"tutorial","text":"02_ClassSystem","value":"02_ClassSystem"}],"name":"onConstructed","longname":"Base#onConstructed","kind":"function","memberof":"Base","scope":"instance","params":[],"$longname":"Base#onConstructed","$kind":"method","id":1442,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Helper method to replace string based values containing \"@config:\" with the matching config value\n     * of this instance.\n     * @param {Object|Object[]} items\n     */","meta":{"range":[11107,12622],"filename":"Base.mjs","lineno":363,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046486","name":"Base#parseItemConfigs","type":"MethodDefinition","paramnames":["items"]},"vars":{"":null}},"description":"Helper method to replace string based values containing \"@config:\" with the matching config value<br />of this instance.","params":[{"type":{"names":["Object","Array.<Object>"]},"name":"items"}],"name":"parseItemConfigs","longname":"Base#parseItemConfigs","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#parseItemConfigs","$kind":"method","id":1443,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * When using set(), configs without a trailing underscore can already be assigned,\n     * so the hasOwnProperty() check will return true\n     * @param {Boolean} [forceAssign=false]\n     */","meta":{"range":[12830,13762],"filename":"Base.mjs","lineno":405,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046657","name":"Base#processConfigs","type":"MethodDefinition","paramnames":["forceAssign"]},"vars":{"":null}},"description":"When using set(), configs without a trailing underscore can already be assigned,<br />so the hasOwnProperty() check will return true","params":[{"type":{"names":["Boolean"]},"optional":true,"defaultvalue":false,"name":"forceAssign"}],"name":"processConfigs","longname":"Base#processConfigs","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#processConfigs","$kind":"method","id":1444,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * @param {String} className\n     * @param {Object} remote\n     */","meta":{"range":[13847,14308],"filename":"Base.mjs","lineno":431,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046731","name":"Base.sendRemotes","type":"MethodDefinition","paramnames":["className","remote"]},"vars":{"":null}},"params":[{"type":{"names":["String"]},"name":"className"},{"type":{"names":["Object"]},"name":"remote"}],"name":"sendRemotes","longname":"Base.sendRemotes","kind":"function","memberof":"Base","scope":"static","$longname":"Base.sendRemotes","$kind":"method","id":1445,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Change multiple configs at once, ensuring that all afterSet methods get all new assigned values\n     * @param {Object} values={}\n     */","meta":{"range":[14466,14973],"filename":"Base.mjs","lineno":451,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046789","name":"Base#set","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"Change multiple configs at once, ensuring that all afterSet methods get all new assigned values","params":[{"type":{"names":["Object"]},"defaultvalue":"{}","name":"values"}],"name":"set","longname":"Base#set","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#set","$kind":"method","id":1446,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * We want to assign class fields first and remove them from the config object,\n     * so that afterSet(), beforeGet() and beforeSet() methods can get the new values right away\n     * @param {Object} config\n     * @returns {Object}\n     */","meta":{"range":[15231,15603],"filename":"Base.mjs","lineno":474,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046847","name":"Base#setFields","type":"MethodDefinition","paramnames":["config"]},"vars":{"":null}},"description":"We want to assign class fields first and remove them from the config object,<br />so that afterSet(), beforeGet() and beforeSet() methods can get the new values right away","params":[{"type":{"names":["Object"]},"name":"config"}],"returns":[{"type":{"names":["Object"]}}],"name":"setFields","longname":"Base#setFields","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#setFields","$kind":"method","id":1447,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * Sets the value of a static config by a given key\n     * @param {String} key The key of a staticConfig defined inside static getStaticConfig\n     * @param {*} value\n     * @returns {Boolean} true in case the config exists and got changed\n     */","meta":{"range":[15869,16108],"filename":"Base.mjs","lineno":494,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046904","name":"Base#setStaticConfig","type":"MethodDefinition","paramnames":["key","value"]},"vars":{"":null}},"description":"Sets the value of a static config by a given key","params":[{"type":{"names":["String"]},"description":"The key of a staticConfig defined inside static getStaticConfig","name":"key"},{"type":{"names":["*"]},"name":"value"}],"returns":[{"type":{"names":["Boolean"]},"description":"true in case the config exists and got changed"}],"name":"setStaticConfig","longname":"Base#setStaticConfig","kind":"function","memberof":"Base","scope":"instance","$longname":"Base#setStaticConfig","$kind":"method","id":1448,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * <p>Enhancing the toString() method, e.g.</p>\n     * `Neo.create('Neo.button.Base').toString() => \"[object Neo.button.Base (neo-button-1)]\"`\n     * @returns {String}\n     */","meta":{"range":[16302,16389],"filename":"Base.mjs","lineno":515,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046935","name":"Base#Symbol.toStringTag","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"<p>Enhancing the toString() method, e.g.</p><br />`Neo.create('Neo.button.Base').toString() => \"[object Neo.button.Base (neo-button-1)]\"`","returns":[{"type":{"names":["String"]}}],"name":"toStringTag","longname":"Base#Symbol.toStringTag","kind":"member","memberof":"Base#Symbol","scope":"static","params":[],"$longname":"Base#Symbol.toStringTag","$kind":"property","id":1449,"neoClassName":"Neo.core.Base"},{"comment":"/**\n     * <p>Enhancing the instanceof method. Without this change:</p>\n     * `Neo.collection.Base.prototype instanceof Neo.core.Base => true`\n     * <p>With this change:</p>\n     * `Neo.collection.Base.prototype instanceof Neo.core.Base => false`<br>\n     * `Neo.create(Neo.collection.Base) instanceof Neo.core.Base => true`\n     * @returns {Boolean}\n     */","meta":{"range":[16760,16959],"filename":"Base.mjs","lineno":522,"columnno":4,"path":"/Users/Shared/github/neomjs/neomjs-realworld-example-app/node_modules/neo.mjs/src/core","code":{"id":"astnode100046952","name":"Base.Symbol.hasInstance","type":"MethodDefinition","paramnames":["instance"]},"vars":{"":null}},"description":"<p>Enhancing the instanceof method. Without this change:</p><br />`Neo.collection.Base.prototype instanceof Neo.core.Base => true`<br /><p>With this change:</p><br />`Neo.collection.Base.prototype instanceof Neo.core.Base => false`<br><br />`Neo.create(Neo.collection.Base) instanceof Neo.core.Base => true`","returns":[{"type":{"names":["Boolean"]}}],"name":"hasInstance","longname":"Base.Symbol.hasInstance","kind":"function","memberof":"Base.Symbol","scope":"static","params":[],"$longname":"Base.Symbol.hasInstance","$kind":"method","id":1450,"neoClassName":"Neo.core.Base"}]}