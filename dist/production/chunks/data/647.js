"use strict";(self.webpackChunkneo_mjs_realworld_example_app=self.webpackChunkneo_mjs_realworld_example_app||[]).push([[647],{647:(e,s,t)=>{t.r(s),t.d(s,{default:()=>c});var r=t(767),a=t(74);class i extends a.Z{static config={className:"Neo.util.Array"};static add(e,s){Array.isArray(s)||(s=[s]),s.forEach((s=>{e.includes(s)||e.push(s)}))}static difference(e=[],s=[]){return e.filter((e=>!s.includes(e)))}static hasItem(e,s){return e.includes(s)}static intersection(e=[],s=[]){return e.filter((e=>s.includes(e)))}static move(e,s,t){return s===t||(s>=e.length&&(s=e.length-1),e.splice(t,0,e.splice(s,1)[0])),e}static remove(e,s){let t;Array.isArray(s)||(s=[s]),s.forEach((s=>{t=e.indexOf(s),t>-1&&e.splice(t,1)}))}static removeAdd(e,s,t){this.remove(e,s),this.add(e,t)}static toggle(e,s,t){let r;r=!0===t?"add":!1===t||this.hasItem(e,s)?"remove":"add",this[r](e,s)}static union(e,s){let t,r=[],a=e.concat(s),i=a.length,n={};for(;i--;)t=a[i],n[t]||(r.unshift(t),n[t]=!0);return r}static unshift(e,s){Array.isArray(s)||(s=[s]),s.forEach((s=>{e.includes(s)||e.unshift(s)}))}}Neo.applyClassConfig(i);const n=i;class o extends r.Z{static config={className:"Neo.manager.rpc.Message",singleton:!0,sorters:[{direction:"ASC",property:"id"}]};endPointTimeouts=[];messageId=1;requestBuffer=20;socketConnections={};transactionId=1;onMessage(e){let s=Neo.manager.rpc.Api.get(`${e.service}.${e.method}`);return this[`onMessage${Neo.capitalize(s.type)}`](e,s)}onMessageAjax(e,s){return new Promise(((t,r)=>{let a=this,i=s.url;a.register({id:a.messageId,method:e.method,params:e.params,reject:r,resolve:t,service:e.service,transactionId:0,url:i}),a.messageId++,a.endPointTimeouts.includes(i)||(a.endPointTimeouts.push(i),setTimeout((()=>{a.resolveBufferTimeout(i)}),a.requestBuffer))}))}async onMessageWebsocket(e,s){let r=this,a=s.url,i=r.socketConnections[a];if(!i){let e=await t.e(72).then(t.bind(t,72));r.socketConnections[a]=i=Neo.create(e.default,{serverAddress:a})}return await i.promiseMessage(e)}async resolveBufferTimeout(e){let s,t=this,r=[],a=t.find({transactionId:0,url:e}),i=[],o=t.transactionId;a.forEach((e=>{e.transactionId=o,r.push(e.id),i.push({id:e.id,method:e.method,params:e.params,service:e.service})})),n.remove(t.endPointTimeouts,e),t.transactionId++,s=await Neo.Fetch.request(e,{},"post",JSON.stringify({tid:o,requests:i})),a.forEach((e=>{e.resolve()})),t.remove(r)}}const c=Neo.applyClassConfig(o)}}]);